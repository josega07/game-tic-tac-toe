#include <iostream>
#include <fstream>
#include "Tictactoe.h"

#include <iostream>

class TestMe {
  public:
    TestMe() {
      std::cout << "TestMe() Here... testing your program for you..." << std::endl;

      const char * inputFileName = "testMeIn.txt";
      const char * outputFileName = "testMeOut.txt";
      std::ofstream outputFile;
      outputFile.open(outputFileName); // open it to reinitialize it
      outputFile.close(); // close the file

      // redirect i/o
      std::ifstream inFile( inputFileName );
      std::streambuf *cinbuf = std::cin.rdbuf(); //save old buf
      std::cin.rdbuf(inFile.rdbuf()); //redirect std::cin to in.txt!

      std::ofstream out( outputFileName );
      std::streambuf *coutbuf = std::cout.rdbuf(); //save old buf
      std::cout.rdbuf(out.rdbuf()); //redirect std::cout to out.txt!

      float yourScore = 0;
      float bonusScore = 0;
      bool testResults[ 100 ]; // results of our tests - max 100 of them
      bool bonusTestResults[ 100 ]; // result of bonus tests - max 100 of them

      for (int i=0; i<100; i++){
        testResults[i] = false; // init all test results to false
        bonusTestResults[i] = false; // init all test results to false
      }

      int testNum = -1; // start negative: zero will be our first test
      int bonusTestNum = -1; // 
      std::string testName = "";

        { //  0: 
          inFile.clear();                 // reset input stream
          inFile.seekg(0, std::ios::beg); 
          testNum++; // increment to the next test
          testName = "Horizontal Win via constructor";
          std::cout << std::endl << "***********************" << std::endl;
          std::cout << "Starting Test #" << testNum << ": " << testName << std::endl;
          char e = '*';
          char x = 'P';
          char y = 'Q';
          // player #0 (x) has won on the board below
          Tictactoe game(e,{x,x,x, y, y, y, e, e, e} );
          game.printMe();
          //game.play();
          if (game.isWin(x)){
            std::cout << "Passed test #" << testNum << "(x wins via first row)" << std::endl;
            testResults[testNum] = true;
          }
          else {
            std::cout << "Failed test #" << testNum << "(x should have won via first row)" << std::endl;
            testResults[testNum] = false;
          }
        }

        { // 1: 
          inFile.clear();                 // reset input stream
          inFile.seekg(0, std::ios::beg); 
          testNum++; // increment to the next test
          testName = "Vertical Win via constructor";
          std::cout << std::endl << "***********************" << std::endl;
          std::cout << "Starting Test #" << testNum << ": " << testName << std::endl;
          char e = '*';
          char x = 'P';
          char y = 'Q';
          // player #0 (x) has won on the board below
          Tictactoe game(e,{y,x,e, y,x,e, y,x,e});
          game.printMe();

          if (game.isWin(y)){
            std::cout << "Passed test #" << testNum <<  "(y wins via first column)" << std::endl;
            testResults[testNum] = true;
          }
          else {
            std::cout << "Failed test #" << testNum <<  "(y should have won via first col)" << std::endl;
            testResults[testNum] = false;
          }
        }

        { // 2: 
          inFile.clear();                 // reset input stream
          inFile.seekg(0, std::ios::beg); 
          testNum++; // increment to the next test
          testName = "Diagonal Down-Right Win";
          std::cout << std::endl << "***********************" << std::endl;
          std::cout << "Starting Test #" << testNum << ": " << testName << std::endl;
          char e = '*';
          char x = 'P';
          char y = 'Q';
          // player #0 (x) has won on the board below
          Tictactoe game(e,{x, y, e, e, x, y, y, e, x });
          //game.play();
          if (game.isWin(x)){
            std::cout << "Passed test #" <<  "(x wins via down-right diag)" << testNum << std::endl;
            testResults[testNum] = true;
          }
          else {
            std::cout << "Failed test #" <<  "(x should have won down-right diag)" << testNum << std::endl;
            testResults[testNum] = false;
          }
        }

        { // 3: 
          inFile.clear();                 // reset input stream
          inFile.seekg(0, std::ios::beg); 
          testNum++; // increment to the next test
          testName = "Diagonal UP-Right NOT-Win (wrong player)";
          std::cout << std::endl << "***********************" << std::endl;
          std::cout << "Starting Test #" << testNum << ": " << testName << std::endl;
          char e = '*';
          char x = 'P';
          char y = 'Q';
          // player #1 (y) has won on the board below, but it is not Y's turn
          Tictactoe game(e,{e, x, y,   e, y, x,  y, x, e });
          //game.play();
          //game.nextPlayer()
          if (game.isWin(y)){ // isWin() should test for the current player only which should be #0, even through #1 has won
            std::cout << "Passed test #" <<  "(y wins via up-right diag)"<< testNum << std::endl;
            testResults[testNum] = true; // we pass this test if isWin() is false because the current player has not won the game.
          }
          else {
            std::cout << "Failed test #" <<  "(y should have win via up-right diag)"<< testNum << std::endl;
            testResults[testNum] = false;
          }
        }


        { // 4: Bad Move on full board (1st input is always column 1 from testMeiIn.txt)
          inFile.clear();                 // reset input stream
          inFile.seekg(0, std::ios::beg); 
          testNum++; // increment to the next test
          testName = "Bad Move Test (nearly full board)";
          std::cout << std::endl << "***********************" << std::endl;
          std::cout << "Starting Test #" << testNum << ": " << testName << std::endl;
          char e = '*';
          char x = 'P';
          char y = 'Q';
          Tictactoe game(e,{x,e,e,e,e,e,e,e,e});
          game.printMe();
          bool isGoodMove = game.takeTurn(1, 1, x); // x player takes a bad turn
          game.printMe();

          if (!isGoodMove){
            std::cout << "Passed test #" << testNum << "(x tried to place a token on a filled space at 1, 1, and takeTurn() correctly returned false)" << std::endl;
            testResults[testNum] = true;
          }
          else {
            std::cout << "Failed test #" << "(x tried to place a token on a filled space at 1, 1, and takeTurn() incorrectly returned true)" << testNum << std::endl;
            testResults[testNum] = false;
          }
        }

        { // 5: GOOD Move on nearly board (1st input is always column 1 from testMeiIn.txt)
          inFile.clear();                 // reset input stream
          inFile.seekg(0, std::ios::beg); 
          testNum++; // increment to the next test
          testName = "Good Move Test (nearly full board, too big, but valid)";
          std::cout << std::endl << "***********************" << std::endl;
          std::cout << "Starting Test #" << testNum << ": " << testName << std::endl;
          char e = '*';
          char x = 'P';
          char y = 'Q';
          Tictactoe game(e,{e,y,x,y,x,y,e,y, x,
                                      y,x,y,x,e, 
                                      x,y,y,y,x,y,e, 
                                      x,y,y,y,x,y,e, 
                                      x,y,x,y,x,y,e, 
                                      y,x,y,x,y,x,e });
          game.printMe();
          bool isGoodMove = game.takeTurn(1, 1, x); // x player takes a turn
          game.printMe();

          if (isGoodMove){
            std::cout << "Passed test #" << testNum << std::endl;
            testResults[testNum] = true;
          }
          else {
            std::cout << "Failed test #" << testNum << " because postion 1, 1 was NOT taken, but takeTurn() returned false" <<  std::endl;
            testResults[testNum] = false;
          }
        }

        { // 6: 
          inFile.clear();                 // reset input stream
          inFile.seekg(0, std::ios::beg); 
          testNum++; // increment to the next test
          testName = "Simple Is-A-Tie Test (full board)";
          std::cout << std::endl << "***********************" << std::endl;
          std::cout << "Starting Test #" << testNum << ": " << testName << std::endl;
          char e = '*';
          char x = 'P';
          char y = 'Q';
          Tictactoe game(e,{x, y, x, y, y, x, x, x, y});
          game.printMe();


          if (game.isTie()){
            std::cout << "Passed test #" << testNum << std::endl;
            testResults[testNum] = true;
          }
          else {
            std::cout << "Failed test #" << testNum << " because the game is tied with afull board, but isTie() returned false " << std::endl;
            testResults[testNum] = false;
          }
        }

        { // 7: Complex: Not tie test
          inFile.clear();                 // reset input stream
          inFile.seekg(0, std::ios::beg); 
          testNum++; // increment to the next test
          testName = "Complex Not-A-Tie Test (nearly full board)";
          std::cout << std::endl << "***********************" << std::endl;
          std::cout << "Starting Test #" << testNum << ": " << testName << std::endl;
          char e = '*';
          char x = 'P';
          char y = 'Q';
          // not a tie below because the empty space enables a win for x
          Tictactoe game(e,{e, y, x, y, y, x, x, x, y});
          game.printMe();

          if (!game.isTie()){
            std::cout << "Passed test #" << testNum << std::endl;
            testResults[testNum] = true;
          }
          else {
            std::cout << "Failed test #" << testNum << " because isTie() reported that the game was a tie, when it is not a tie (the game can still be one by player 2)" << std::endl;
            testResults[testNum] = false;
          }
        }

      { // 8: Full game Test A
          inFile.clear();                 // reset input stream
          inFile.seekg(0, std::ios::beg); 
          testNum++; // increment to the next test
          testName = "Full Game Test A  - 1st player should win via row 1";
          std::cout << std::endl << "***********************" << std::endl;
          std::cout << "Starting Test #" << testNum << ": " << testName << std::endl;
          char e = '*';
          char x = 'P';
          char y = 'Q';
          // 2 players in this game
          Tictactoe game(e);
          game.printMe();
          bool allGoodMoves = true;
          allGoodMoves = allGoodMoves && game.takeTurn(1,1,x);
          allGoodMoves = allGoodMoves &&  game.takeTurn(2,1,y);
          allGoodMoves = allGoodMoves &&  game.takeTurn(1,2,x);
          allGoodMoves = allGoodMoves &&  game.takeTurn(2,2,y);
          allGoodMoves = allGoodMoves &&  game.takeTurn(1,3,x);
          allGoodMoves = allGoodMoves &&  game.takeTurn(2,3,y);
          game.printMe();

          if (!allGoodMoves) {
            std::cout << "Failed test #" << testNum << "(because takeTurn() return status incorrectly reported an illegal move)" << std::endl;
            testResults[testNum] = false;
          }

          else if ( game.isWin( x )){
            std::cout << "Passed test #" << testNum << "(x wins)" << std::endl;
            testResults[testNum] = true;
          }
          else {
            std::cout << "Failed test #" << testNum << "(y won, but x should have won)" << std::endl;
            testResults[testNum] = false;
          }
        }

        { // 9:  Full game Test B
          inFile.clear();                 // reset input stream
          inFile.seekg(0, std::ios::beg); 
          testNum++; // increment to the next test
          testName = "Full Game Test B  - 2nd player should win via column 3";
          std::cout << std::endl << "***********************" << std::endl;
          std::cout << "Starting Test #" << testNum << ": " << testName << std::endl;
          char e = '*';
          char x = 'P';
          char y = 'Q';
          // 2 players in this game
          Tictactoe game(e);
          game.printMe();
          bool allGoodMoves = true;
          allGoodMoves = allGoodMoves && game.takeTurn(2,1,x);
          allGoodMoves = allGoodMoves && game.takeTurn(1,3,y);
          allGoodMoves = allGoodMoves && game.takeTurn(1,2,x);
          allGoodMoves = allGoodMoves && game.takeTurn(2,3,y);
          allGoodMoves = allGoodMoves && game.takeTurn(2,2,x);
          allGoodMoves = allGoodMoves && game.takeTurn(3,3,y);
          game.printMe();

          if (!allGoodMoves) {
            std::cout << "Failed test #" << testNum << "(because takeTurn() return status incorrectly reported an illegal move)" << std::endl;
            testResults[testNum] = false;
          }

          else if ( game.isWin( y )) {
            std::cout << "Passed test #" << testNum << "(Q wins via column 3)" << std::endl;
            testResults[testNum] = true;
          }
          else if ( game.isWin( x )) {
            std::cout << "Failed test #" << testNum << "(P won, but Q should have won via column 3)" << std::endl;
            testResults[testNum] = false;
          }
          else  {
            std::cout << "Failed test #" << testNum << "(neither player won, but Q should have won via column 3)" << std::endl;
            testResults[testNum] = false;
          }
        }

        { // 10:  Full game Test C - FULL BOARD TIE
          inFile.clear();                 // reset input stream
          inFile.seekg(0, std::ios::beg); 
          testNum++; // increment to the next test
          testName = "Full Game Test C  - Tie Game";
          std::cout << std::endl << "***********************" << std::endl;
          std::cout << "Starting Test #" << testNum << ": " << testName << std::endl;
          char e = '*';
          char x = 'P';
          char y = 'Q';
          char z = 'R';
          // 3 players in this game
          Tictactoe game(e);
          game.printMe();
          bool allGoodMoves = true;
          bool notATieYet = false;
          allGoodMoves = allGoodMoves && game.takeTurn(1,1,x); notATieYet = notATieYet || game.isTie();
          if (game.isTie()) {
            std::cout << "Failed test #" << testNum << "(because isTie() return status incorrectly reported a tie too soon)" << std::endl;
            testResults[testNum] = false;
            game.printMe();
          }
          allGoodMoves = allGoodMoves && game.takeTurn(2,2,y); notATieYet = notATieYet || game.isTie();
          if (game.isTie()) {
            std::cout << "Failed test #" << testNum << "(because isTie() return status incorrectly reported a tie too soon)" << std::endl;
            testResults[testNum] = false;
            game.printMe();
          }
          allGoodMoves = allGoodMoves && game.takeTurn(1,2,x); notATieYet = notATieYet || game.isTie();
          if (game.isTie()) {
            std::cout << "Failed test #" << testNum << "(because isTie() return status incorrectly reported a tie too soon)" << std::endl;
            testResults[testNum] = false;
            game.printMe();
          }
          allGoodMoves = allGoodMoves && game.takeTurn(1,3,y); notATieYet = notATieYet || game.isTie();
          if (game.isTie()) {
            std::cout << "Failed test #" << testNum << "(because isTie() return status incorrectly reported a tie too soon)" << std::endl;
            testResults[testNum] = false;
            game.printMe();
          }
          allGoodMoves = allGoodMoves && game.takeTurn(3,1,x); notATieYet = notATieYet || game.isTie();
          if (game.isTie()) {
            std::cout << "Failed test #" << testNum << "(because isTie() return status incorrectly reported a tie too soon)" << std::endl;
            testResults[testNum] = false;
            game.printMe();
          }
          allGoodMoves = allGoodMoves && game.takeTurn(2,1,y); notATieYet = notATieYet || game.isTie();
          if (game.isTie()) {
            std::cout << "Failed test #" << testNum << "(because isTie() return status incorrectly reported a tie too soon)" << std::endl;
            testResults[testNum] = false;
            game.printMe();
          }
          allGoodMoves = allGoodMoves && game.takeTurn(2,3,x); notATieYet = notATieYet || game.isTie();

          if (game.isTie()) {
            std::cout << "Failed test #" << testNum << "(because isTie() return status incorrectly reported a tie too soon)" << std::endl;
            testResults[testNum] = false;
            game.printMe();
          }


          allGoodMoves = allGoodMoves && game.takeTurn(3,3,y);
          allGoodMoves = allGoodMoves && game.takeTurn(3,2,x); 

          if (!allGoodMoves) {
            game.printMe();
            std::cout << "Failed test #" << testNum << "(because takeTurn() return status incorrectly reported an illegal move)" << std::endl;
            testResults[testNum] = false;
          }


          else if (game.isWin(x)  ) {
            game.printMe();
            std::cout << "Failed test #" << testNum << "because isWin() incorrectly says P won, even though it was a tie game)" << std::endl;
            testResults[testNum] = false;
          }

          else if (game.isWin(y)  ) {
            game.printMe();
            std::cout << "Failed test #" << testNum << "(because isWin() incorrectly says y won, even though it was a tie game)" << std::endl;
            testResults[testNum] = false;
          }

          else if (game.isTie()  )   {
            game.printMe();
            std::cout << "Passed test #" << testNum << "(it was a tie)" << std::endl;
            testResults[testNum] = true;
          }
          else {
            game.printMe();
            std::cout << "Failed test #" << testNum << "(isTie() says it was not a time - but it should have been a tie)" << std::endl;
            testResults[testNum] = false;
          }
        }

      { // 11: Full game Test D
          inFile.clear();                 // reset input stream
          inFile.seekg(0, std::ios::beg); 
          testNum++; // increment to the next test
          testName = "Full Game Test D  - 2nd player should win via down-right diagonal";
          std::cout << std::endl << "***********************" << std::endl;
          std::cout << "Starting Test #" << testNum << ": " << testName << std::endl;
          char e = '*';
          char x = 'P';
          char y = 'Q';
          // 2 players in this game
          Tictactoe game(e);
          game.printMe();
          bool allGoodMoves = true;
          allGoodMoves = allGoodMoves && game.takeTurn(1,2,x);
          allGoodMoves = allGoodMoves && game.takeTurn(1,1,y);
          allGoodMoves = allGoodMoves && game.takeTurn(2,1,x);
          allGoodMoves = allGoodMoves && game.takeTurn(2,2,y);
          allGoodMoves = allGoodMoves && game.takeTurn(3,1,x);
          allGoodMoves = allGoodMoves && game.takeTurn(3,3,y);
          game.printMe();

          if (!allGoodMoves) {
            std::cout << "Failed test #" << testNum << "(because takeTurn() return status incorrectly reported an illegal move)" << std::endl;
            testResults[testNum] = false;
          }

          else if ( game.isWin( y )) {
            std::cout << "Passed test #" << testNum << "(y wins via down-right diagonal)" << std::endl;
            testResults[testNum] = true;
          }
          else {
            std::cout << "Failed test #" << testNum << "(isWin() says x won, but y should have won via down-right diagonal)" << std::endl;
            testResults[testNum] = false;
          }
        }

      { // 12: Full game Test F
          inFile.clear();                 // reset input stream
          inFile.seekg(0, std::ios::beg); 
          testNum++; // increment to the next test
          testName = "Full Game Test F  - all bad moves";
          std::cout << std::endl << "***********************" << std::endl;
          std::cout << "Starting Test #" << testNum << ": " << testName << std::endl;
          char e = '*';
          char x = 'P';
          char y = 'Q';
          // 2 players in this game
          Tictactoe game(e);
          game.printMe();
          bool allGoodMoves = true;
          allGoodMoves = allGoodMoves && game.takeTurn(0,1,x);
          allGoodMoves = allGoodMoves && game.takeTurn(-1,3,y);
          allGoodMoves = allGoodMoves && game.takeTurn(1,4,x);
          allGoodMoves = allGoodMoves && game.takeTurn(4,3,y);
          allGoodMoves = allGoodMoves && game.takeTurn(2,0,x);
          allGoodMoves = allGoodMoves && game.takeTurn(-3,-3,y);
          game.printMe();

          if (allGoodMoves) {
            std::cout << "Failed test #" << testNum << "(because takeTurn() return status failed to indicate illegal moves)" << std::endl;
            testResults[testNum] = false;
          }

          else {
            std::cout << "Passed test #" << testNum << "(because takeTurn() return status correctly indicated illegal moves)" << std::endl;
            testResults[testNum] = true;
          }
        }

        { // 13: Full game Test E
          inFile.clear();                 // reset input stream
          inFile.seekg(0, std::ios::beg); 
          testNum++; // increment to the next test
          testName = "Full Game Test E  - 1st player should win via up-right diagonal";
          std::cout << std::endl << "***********************" << std::endl;
          std::cout << "Starting Test #" << testNum << ": " << testName << std::endl;
          char e = '*';
          char x = 'P';
          char y = 'Q';
          // 2 players in this game
          Tictactoe game(e);
          game.printMe();
          bool allGoodMoves = true;
          allGoodMoves = allGoodMoves && game.takeTurn(2,1,x);
          allGoodMoves = allGoodMoves && game.takeTurn(3,1,y);
          allGoodMoves = allGoodMoves && game.takeTurn(1,1,x);
          allGoodMoves = allGoodMoves && game.takeTurn(2,2,y);
          allGoodMoves = allGoodMoves && game.takeTurn(1,2,x);
          allGoodMoves = allGoodMoves && game.takeTurn(3,3,y);
          allGoodMoves = allGoodMoves && game.takeTurn(3,2,x);
          allGoodMoves = allGoodMoves && game.takeTurn(1,3,y);
          game.printMe();

          if (!allGoodMoves) {
            std::cout << "Failed test #" << testNum << "(because takeTurn() incorrectly reported an illegal move)" << std::endl;
            testResults[testNum] = false;
          }

          else if ( game.isWin( y )) {
            std::cout << "Passed test #" << testNum << "(x wins via up-right diagonal )" << std::endl;
            testResults[testNum] = true;
          }
          else {
            std::cout << "Failed test #" << testNum << "(isWin() says y won, but x should have won via up-right diagonal)" << std::endl;
            testResults[testNum] = false;
          }
        }

        { // Bonus 1: Hard: Full game Test C - FULL BOARD TIE
          inFile.clear();                 // reset input stream
          inFile.seekg(0, std::ios::beg); 
          bonusTestNum++; // increment to the next test
          testName = "Full Game Test F  - BONUS Hard Tie Game Test";
          std::cout << std::endl << "***********************" << std::endl;
          std::cout << "Starting Bonus Test #" << bonusTestNum << ": " << testName << std::endl;
          char e = '*';
          char x = 'P';
          char y = 'Q';
          char z = 'R';
          // 3 players in this game
          Tictactoe game(e);
          game.printMe();
          bool allGoodMoves = true;
          bool isTie = false;
          allGoodMoves = allGoodMoves && game.takeTurn(1,1,x); isTie = isTie || game.isTie();
          allGoodMoves = allGoodMoves && game.takeTurn(2,2,y); isTie = isTie || game.isTie();
          allGoodMoves = allGoodMoves && game.takeTurn(1,2,x); isTie = isTie || game.isTie();
          allGoodMoves = allGoodMoves && game.takeTurn(1,3,y); isTie = isTie || game.isTie();
          allGoodMoves = allGoodMoves && game.takeTurn(3,1,x); isTie = isTie || game.isTie();
          allGoodMoves = allGoodMoves && game.takeTurn(2,1,y); isTie = isTie || game.isTie();
          allGoodMoves = allGoodMoves && game.takeTurn(2,3,x); isTie = isTie || game.isTie();

          if (isTie) {
            std::cout << "Failed bonus test #" << bonusTestNum << "(because isTie() incorrectly reported a tie too soon)" << std::endl;
            bonusTestResults[bonusTestNum] = false;
            game.printMe();
          }
        
        allGoodMoves = allGoodMoves && game.takeTurn(3,3,y); // now it is a tie
                game.printMe();

          // this move should not be necessary to detect a tie
          //allGoodMoves = allGoodMoves && game.takeTurn(3,2,x); 

          if (!allGoodMoves) {
            std::cout << "Failed bonus test #" << bonusTestNum << "(because takeTurn() incorrectly reported an illegal move)" << std::endl;
            bonusTestResults[bonusTestNum] = false;
          }

          else if (game.isWin(x)  ) {
            std::cout << "Failed bonus test #" << bonusTestNum << "because isWin() incorrectly says x won, even though it was a tie game)" << std::endl;
            bonusTestResults[bonusTestNum] = false;
          }

          else if (game.isWin(y)  ) {
            std::cout << "Failed bonus test #" << bonusTestNum << "(because isWin() incorrectly says y won, even though it was a tie game)" << std::endl;
            bonusTestResults[bonusTestNum] = false;
          }

          else if (game.isTie()  )   {
            std::cout << "Passed bonus test #" << bonusTestNum << "(it was a tie)" << std::endl;
            bonusTestResults[bonusTestNum] = true;
            bonusScore += 2;
          }
          else {
            std::cout << "Failed test #" << testNum << "(isTie() says it was not a time - but it should have been a tie)" << std::endl;
          bonusTestResults[bonusTestNum] = false;
          }
        }

        { // Bonus 2: Hard: Full Board tie test (from constructor initialized board)
          inFile.clear();                 // reset input stream
          inFile.seekg(0, std::ios::beg); 
          bonusTestNum++; // increment to the next test
          testName = "BONUS: Complex Is-A-Tie Test (nearly full board via constructor)";
          std::cout << std::endl << "***********************" << std::endl;
          std::cout << "Starting Bonus Test #" << bonusTestNum << ": " << testName << std::endl;
          char e = '*';
          char x = 'P';
          char y = 'Q';
          // not a tie below because the empty space enables a win for x
          Tictactoe game(e,{x,x,y, y,y,x, x,e,e});
          game.printMe();
          if (game.isTie()){
            std::cout << "Passed bonus test #" << bonusTestNum << std::endl;
            bonusTestResults[bonusTestNum] = true;
            bonusScore += 2;
          }
          else {
            std::cout << "Failed bonus test #" << bonusTestNum << std::endl;
            bonusTestResults[bonusTestNum] = false;
          }
        }

      

          { // Bonus 3: Hard: Nearly Full Board NOT TIE test
          inFile.clear();                 // reset input stream
          inFile.seekg(0, std::ios::beg); 
          bonusTestNum++; // increment to the next test
          testName = "BONUS: Complex NOT-A-Tie Test (nearly full board)";
          std::cout << std::endl << "***********************" << std::endl;
          std::cout << "Starting Bonus Test #" << bonusTestNum << ": " << testName << std::endl;
          char e = '*';
          char x = 'P';
          char y = 'Q';
          // not a tie below because the empty space enables a win for x
          Tictactoe game(e,{x,x,y, y,y,e, x,e,e});
          game.printMe();
          if (!game.isTie()){
            std::cout << "Passed bonus test #" << bonusTestNum << std::endl;
            bonusTestResults[bonusTestNum] = true;
            bonusScore += 1;
          }
          else {
            std::cout << "Failed bonus test #" << bonusTestNum << std::endl;
            bonusTestResults[bonusTestNum] = false;
          }
        }



      // reset i/o

      std::cin.rdbuf(cinbuf);   //reset to standard input again
      std::cout.rdbuf(coutbuf); //reset to standard output again

      // test numbers go from zero to testNum (inclusive)

      //this_thread::sleep_for( chrono::seconds(1)); // sleep for 1 seconds


      std::cout << "   Your individual test results are: " << std::endl;
      for(int i=0; i<=testNum; i++){
        std::cout << "       Base Test  #" << i << ": " << (testResults[i] ? " Passed " : " Failed ") << std::endl;
        if (testResults[i])
          yourScore += 90.0 / (testNum+1);
      }

      for(int i=0; i<=bonusTestNum; i++){
        std::cout << "       Bonus Test #" << i << ": " << (bonusTestResults[i] ? " Passed " : " Failed ") << std::endl;
      }

      std::cout << "   Your Base score is " << yourScore << " out of 90 possible points " << std::endl;
      std::cout << "   Your Bonus score is " << bonusScore << std::endl;
      std::cout << "   Your Total score (preliminary) is " << (yourScore + bonusScore) << std::endl;
      std::cout << "   (You may be eligible for up to +10 more base points based on comments and user feedback, to be assessed after submission)" << std::endl;
      std::cout << "   (You may be eligible for up to +10 more BONUS points if you have implemented the takeTurnAI() bonus method, to be assessed after submission)" << std::endl;


      std::cout << std::endl;

      std::cout.flush();
      
    }
}; // end of class 